{"version":3,"sources":["components/Navbar.tsx","components/Footer.tsx","components/Tabla.tsx","components/TitleApp.tsx","components/ContainerApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","id","Footer","data-position","data-tooltip","Tabla","getUrl","e","param","preventDefault","window","open","process","colSpan","onClick","TitleApp","ContainerApp","src","alt","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAEe,SAASA,IACpB,OACI,6BACA,yBAAKC,UAAU,gBACb,uBAAGC,KAAK,IAAID,UAAU,cAAtB,YACA,wBAAIE,GAAG,aAAaF,UAAU,8BAC5B,4BAAI,uBAAGC,KAAK,kBCNT,SAASE,IACpB,OACI,4BAAQH,UAAU,eAClB,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,aAAf,sBAEA,uBAAGA,UAAU,4CACDI,gBAAc,MAAMC,eAAa,8BAA2BJ,KAAK,0BAC7E,uBAAGD,UAAU,mBAAb,0BCJG,SAASM,IAExB,SAASC,EAAOC,EAAmBC,GACjCD,EAAEE,iBACFC,OAAOC,KAAP,UAAeC,wCAAf,kBAAkDJ,IAGhD,OACI,yBAAKT,UAAU,mBACf,yBAAKA,UAAU,SACb,2BAAOA,UAAU,aACnB,+BACE,4BACI,0CACA,wBAAIc,QAAS,EAAId,UAAU,UAA3B,mBAIN,+BACE,4BAEE,yDAGZ,wBACAe,QAAS,SAACP,GAERD,EAAOC,EAAEK,2CACPb,UAAU,kBAJd,UAKA,wBACAe,QAAS,SAACP,GAERD,EAAOC,EAAEK,4CACRb,UAAU,kBAJb,WAOU,4BACE,qDAEA,wBACAe,QAAS,SAACP,GAERD,EAAOC,EAAEK,uCACTC,QAAS,EAAGd,UAAU,kBAJxB,WAMF,4BACA,+CACA,wBACAe,QAAS,SAACP,GAERD,EAAOC,EAAEK,wCACTC,QAAS,EAAGd,UAAU,kBAJxB,WAOA,4BACA,sCACA,wBACAe,QAAS,SAACP,GAERA,EAAEE,iBACAC,OAAOC,KAAKC,sDAEdC,QAAS,EAAGd,UAAU,kBANxB,eC5DK,SAASgB,IACpB,OACI,yBAAKhB,UAAU,kBACX,yBAAKA,UAAU,oBACf,gFCFG,SAASiB,IACpB,OAEQ,yBAAKjB,UAAU,oBACjB,yBAAKA,UAAU,gBACf,yBAAKkB,IAAI,8FAA8FC,IAAI,MAE7G,kBAAC,EAAD,MACA,kBAACb,EAAD,OCaOc,MAjBf,WACE,OACE,yBAAKpB,UAAU,QAEX,kBAACD,EAAD,MACA,gCACE,kBAACkB,EAAD,OAIF,kBAACd,EAAD,QCNYkB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a87089a7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Navbar() {\n    return (\n        <nav>\n        <div className=\"nav-wrapper \">\n          <a href=\"#\" className=\"brand-logo\">Mielikki</a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li><a href=\"sass.html\"></a></li>            \n          </ul>\n        </div>\n      </nav>\n    )\n}\n","import React from 'react'\n\nexport default function Footer() {    \n    return (\n        <footer className=\"page-footer\">\n        <div className=\"footer-copyright\">\n            <div className=\"container\">\n            © 2020 camicasii\n            <a className=\"grey-text text-lighten-4 right\n            tooltipped\" data-position=\"top\" data-tooltip=\"Mas productos ©Camicasii\" href=\"https://camicasii.xyz/\">\n            <i className=\" material-icons\">add_circle_outline</i>\n            \n            </a>\n            </div>\n          </div>\n        </footer>\n    )\n}\n","import React from 'react'\n\n\n\n\n\nexport default function Tabla() { \n\nfunction getUrl(e:React.MouseEvent,param:string) {\n  e.preventDefault()\n  window.open(`${process.env.REACT_APP_URL}?token=${param}`)\n}\n\n    return (\n        <div className=\"col-cami-button\" >          \n        <div className=\"card \">\n          <table className=\"container\" >\n        <thead>\n          <tr>\n              <th>Plataforma</th>\n              <th colSpan={2}  className=\"center\">Arquitectura </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            \n            <td>\nInstalador Windows (.msi)</td>\n\n<td\nonClick={(e)=>{\n  //@ts-ignore\n  getUrl(e,process.env.REACT_APP_NAME_WIN_32)}}\n    className=\"center dowload\">32-bit</td>\n<td\nonClick={(e)=>{\n  //@ts-ignore\n  getUrl(e,process.env.REACT_APP_NAME_WIN_64)}}\n   className=\"center dowload\">64-bit</td>\n          \n          </tr>\n          <tr>            \n            <td>\n            AppImage Linux (x64) </td>\n            <td \n            onClick={(e)=>{\n              //@ts-ignore\n              getUrl(e,process.env.REACT_APP_NAME_LINUX_APP_IMAGE)}}\n              colSpan={2} className=\"center dowload\">64-bit</td>     \n          </tr>\n          <tr>\n          <td>deb Linux (x64)</td>\n          <td\n          onClick={(e)=>{\n            //@ts-ignore\n            getUrl(e,process.env.REACT_APP_NAME_LINUX_DEB)}}\n            colSpan={2} className=\"center dowload\">64-bit</td>\n          </tr>\n\n          <tr>\n          <td>Source</td>\n          <td\n          onClick={(e)=>{\n            //@ts-ignore\n            e.preventDefault()\n              window.open(process.env.REACT_APP_REPO)}}\n\n            colSpan={2} className=\"center dowload\">Github</td>\n          </tr>          \n        </tbody>\n      </table>\n      </div>\n          </div>\n        \n    )\n}\n","import React from 'react'\n\nexport default function TitleApp() {\n    return (\n        <div className=\"col-cami-text \">\n            <div className=\"container center\">\n            <h1  >Visualiza y administra tus equipos al instante</h1>  \n            </div>          \n\n          </div>\n    )\n}\n","import React from 'react'\nimport Tabla from './Tabla'\nimport Title from './TitleApp'\n\nexport default function ContainerApp() {\n    return (\n        \n            <div className=\"header-container\">         \n          <div className=\"col-cami-img\">\n          <img src=\"https://res.cloudinary.com/camicasii/image/upload/v1599329528/mielikki/logo512.0_m8a6yq.png\" alt=\"\"/>\n          </div>          \n        <Title/>\n        <Tabla/>\n        </div>        \n        \n\n    )\n}\n","import React,{useState} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport ContainerApp from './components/ContainerApp';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App \">       \n    \n        <Navbar/>      \n        <header>                                 \n          <ContainerApp/>        \n        \n        </header>        \n\n        <Footer/>\n\n  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}